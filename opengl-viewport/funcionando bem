#include <GL/glut.h>
int width = 400;
int height = 400;

int windowWidth = 400;
int windowHeight = 400;
#include <GL/glut.h>

#include <GL/glut.h>

float rotationAngle = 0.0f; // Ângulo de rotação



void display()
{
    glEnable(GL_COLOR_MATERIAL);

    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glEnable(GL_LIGHTING);
    glEnable(GL_LIGHT0);

    //posicao da lus (tipo um ponto de iluminacao com a vela)
    GLfloat lightPosition[] = { 0.0, 1.0, 0.0, 0.0 };
    //luz global (tipo o brilho da tela)
    GLfloat ambientLight[] = { 0.1, 0.1, 0.1, 1.0 };
    //reflexao dos objetos (difusa)
    GLfloat diffuseLight[] = { 1.0, 1.0, 1.0, 1.0 };
    //para deixar liso e polido
    GLfloat specularLight[] = { 0.0, 1.0, 0.0, 1.0 };

    glLightfv(GL_LIGHT0, GL_POSITION, lightPosition);
    glLightfv(GL_LIGHT0, GL_AMBIENT, ambientLight);
    glLightfv(GL_LIGHT0, GL_DIFFUSE, diffuseLight);
    glLightfv(GL_LIGHT0, GL_SPECULAR, specularLight);

    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    // Configurar viewport e projeção para a viewport XY
    glViewport(0, glutGet(GLUT_WINDOW_HEIGHT) / 2, glutGet(GLUT_WINDOW_WIDTH) / 2, glutGet(GLUT_WINDOW_HEIGHT) / 2);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(45.0f, 1.0f, 0.1f, 100.0f);

    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
    gluLookAt(0.0f, 0.0f, 10.0f,  // Posição da câmera
              0.0f, 0.0f, 0.0f,   // Ponto para onde a câmera está olhando
              0.0f, 1.0f, 0.0f);  // Vetor de orientação da câmera

    // Desenhar objetos na viewport XY

    // Configurar viewport e projeção para a viewport XZ
    glViewport(glutGet(GLUT_WINDOW_WIDTH) / 2, glutGet(GLUT_WINDOW_HEIGHT) / 2, glutGet(GLUT_WINDOW_WIDTH) / 2, glutGet(GLUT_WINDOW_HEIGHT) / 2);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(45.0f, 1.0f, 0.1f, 100.0f);

    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
    gluLookAt(0.0f, 10.0f, 0.0f,  // Posição da câmera
              0.0f, 0.0f, 0.0f,   // Ponto para onde a câmera está olhando
              0.0f, 0.0f, -1.0f);  // Vetor de orientação da câmera

    // Desenhar objetos na viewport XZ

    // Configurar viewport e projeção para a viewport YZ
    glViewport(0, 0, glutGet(GLUT_WINDOW_WIDTH) / 2, glutGet(GLUT_WINDOW_HEIGHT) / 2);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(45.0f, 1.0f, 0.1f, 100.0f);

    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
    gluLookAt(10.0f, 0.0f, 0.0f,  // Posição da câmera
              0.0f, 0.0f, 0.0f,   // Ponto para onde a câmera está olhando
              0.0f, 1.0f, 0.0f);  // Vetor de orientação da câmera

    
    
    
    
    // Viewport perspectiva
    glViewport(0, 200, 200, 200);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
        gluOrtho2D(-5.0, 5.0, -5.0, 5.0);
    //gluPerspective(60.0, 1.0, 0.1, 100.0);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
    gluLookAt(0.0, 5.0, 5.0,0.0, 0.0, 0.0, 0.0, 1.0, 0.0);
    //rotate
    glPushMatrix();
    glColor3f(1.0, 0.0, 0.0);
    glRotatef(rotationAngle, 0.0, 1.0, 0.0);

    glutSolidTeapot(1.0);
    glPopMatrix();

    // Viewport XY

    glViewport(200, 200, 200, 200);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();

    gluOrtho2D(-5.0, 5.0, -5.0, 5.0);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();

    glPushMatrix();
    glColor3f(0.0, 1.0, 0.0);
    glRotatef(rotationAngle, 0.0, 1.0, 0.0);
    glutSolidTeapot(1.0);
    glPopMatrix();

    // Viewport XZ
    glViewport(0, 0, 200, 200);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(-5.0, 5.0, -5.0, 5.0);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();

    glPushMatrix();
    glColor3f(0.0, 0.0, 1.0);
    glRotatef(rotationAngle, 0.0, 1.0, 0.0);
    glutSolidTeapot(1.0);
    glPopMatrix();

    // Viewport YZ
    glViewport(200, 0, 200, 200);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(-5.0, 5.0, -5.0, 5.0);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();

    glPushMatrix();
    glColor3f(1.0, 1.0, 0.0);
    glRotatef(rotationAngle, 0.0, 1.0, 0.0);
    glutSolidTeapot(1.0);
    glPopMatrix();

    glutSwapBuffers();
}

// Função de atualização
void update(int value)
{
    rotationAngle += 1.0f;
    if (rotationAngle >= 360.0f)
        rotationAngle -= 360.0f;

    glutPostRedisplay();
    glutTimerFunc(16, update, 0);
}

// Função principal
int main(int argc, char** argv)
{


    // Inicialização do GLUT
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
    glutInitWindowSize(windowWidth, windowHeight);
    glutCreateWindow("Viewport do Bule");
    //initLighting();
    // Configurações iniciais
    glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
    glEnable(GL_DEPTH_TEST);

    // Registro de callbacks
    glutDisplayFunc(display);
    glutTimerFunc(0, update, 0);

    // Loop principal do GLUT
    glutMainLoop();

    return 0;
}


